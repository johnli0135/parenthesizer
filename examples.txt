/use racket.txt

// display an expression along with true and expected values
/def show 2
define (show expr expected)
    display expr
    display " = "
    display eval expr
    display " (expected "
    display expected
    displayln ")"

/def factorial 1
define (factorial n)
    if (= n 0)
        1
        * n (factorial sub1 n)

/def triangular 1
define (triangular n)
    foldl _+ 0 (range 0 n) 

/def fibonacci 1
define (fibonacci n)
    cond
        | (= n 1)  1
        | (= n 2)  1
        | else     + (fibonacci - n 1) (fibonacci - n 2)

/def mergesort_pipeless 1
define (mergesort_pipeless x)
    if or (empty? x) (empty? rest x)
        x
        letrec ([half   floor / (length x) 2]
                [left   take x half]
                [right  drop x half]
                [merge  lambda (a b)
                            cond
                                [(empty? a)            b]
                                [(empty? b)            a]
                                [(<= first a first b)  cons first a (merge rest a b)]
                                [else                  cons first b (merge a      rest b)]])
            (merge (mergesort_pipeless left) (mergesort_pipeless right))

/def mergesort 1
define (mergesort x)
    if or (empty? x) (empty? rest x)
        x
        letrec : | half   floor / (length x) 2
                 | left   take x half
                 | right  drop x half
                 | merge  lambda (a b)
                             cond
                                 | (empty? a)            b
                                 | (empty? b)            a
                                 | (<= first a first b)  cons first a (merge rest a b)
                                 | else                  cons first b (merge a      rest b)
            (merge (mergesort left) (mergesort right))

/def quicksort 1
define (quicksort x)
    match x
        | (list)           (list)
        | (list-rest p y)  letrec : | l  filter lambda (a) <= a p. y
                                    | r  filter lambda (a) >  a p. y
                               append (quicksort l) (list p) (quicksort r)

// test the functions
show (quote triangular 10) 45
show (quote factorial 6) 720
show (quote fibonacci 10) 55
show (quote mergesort_pipeless shuffle range 0 10) (range 0 10)
show (quote mergesort shuffle range 0 10) (range 0 10)
show (quote quicksort shuffle range 0 10) (range 0 10)
