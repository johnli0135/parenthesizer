/use racket.txt
define (f x y)
    display x
    display y
    + x y.

define (f x y)
    // new indentation level does nothing
    +
        x
      // does nothinng
      y
// new indentation level closes def and +  

define.

let [(a 3)
     (b 4)
     (c 5)]
    +: a b c

+ + + + + + + 1 2 3 4 5 6 7 8

define (f x y)
    display list x y x.
    display list y x y.
    + x y

define (f x y)
/off
    (display x)
    (display y)
    (+ x y)
    /on

define x 3.

(define (fact n)
    if (= n 1)
        1
        * n (fact - n 1))

/def fact 1
define fact n
    if = n 1
        1
        * n fact (- n 1)

fact 3

/mask fact

fact 4

/unmask fact

fact 3

define (file->string f)
   foldl
       lambda (x y) string-append x "\n" y
       ""
       file->lines f

define (swap stack)
    let ([tail rest rest stack]
         [top first stack]
         [mid first rest stack])
        cons mid (cons top tail)

if a if b if c if d if e if f
    g
    h

banner

+: 1 2 3.

>: 5 4 3 2 1.

define one-to-nine
  append list 1 2 3. list 4 5 6. list 7 8 9.

/mask + - * /
list + - * /
/unmask + - * /

list _+ _- _* _/

list + - * /

display "hello, world"

define (sum l)
    foldl _+ 0 l

>: 5 4 3 2 1

/def test 1

test a b

/del test

test a b

cond
  | (= 1 2)  display "test"
  | (= 1 1)  display "test2"
  | else     display "else"

let (| a 1
     | b 2
     | c 3)
  +: a b c

let : | a 1
      | b 2
      | c 3
    +: a b c
