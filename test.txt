/use racket.txt
define (f x y)
    display x
    display y
    + x y.

define (f x y)
    // new indentation level does nothing
    +
        x
      // does nothinng
      y
// new indentation level closes def and +  

define.

let [(a 3)
     (b 4)
     (c 5)]
    +: a b c

+ + + + + + + 1 2 3 4 5 6 7 8

define (f x y)
    display list x y x.
    display list y x y.
    + x y

define (f x y)
/off
    (display x)
    (display y)
    (+ x y)
    /on

define x 3.

(define (fact n)
    if (= n 1)
        1
        * n (fact - n 1))

/def fact 1
define fact n
    if = n 1
        1
        * n fact (- n 1)

fact 3

/mask fact

fact 4

/unmask fact

fact 3

define (file->string f)
   foldl
       lambda (x y) string-append x "\n" y
       ""
       file->lines f

define (swap stack)
    let ([tail rest rest stack]
         [top first stack]
         [mid first rest stack])
        cons mid (cons top tail)

if a if b if c if d if e if f
    g
    h

banner

+: 1 2 3.

>: 5 4 3 2 1.

define one-to-nine
  append list 1 2 3. list 4 5 6. list 7 8 9.

/mask + - * /
list + - * /
/unmask + - * /

list _+ _- _* _/

list + - * /

display "hello, world"

define (sum l)
    foldl _+ 0 l

>: 5 4 3 2 1

/def test 1

test a b

/del test

test a b

cond
  | (= 1 2)  display "test"
  | (= 1 1)  display "test2"
  | else     display "else"

let (| a 1
     | b 2
     | c 3)
  +: a b c

let : | a 1
      | b 2
      | c 3
    +: a b c

let* : | x  random 100
       | y  random + x 1
  list (+ x y) x y

letrec : | fac  lambda (n)
                  if = 0 n
                    1
                    * n (fac sub1 n)
  map _fac (range 10)

for*/list : | i  range 1 20
            | j  range i 20
            | k  range j 20
            #:when = (+ sqr i sqr j) sqr k
  list i j k

/def rem-dups 1
define (rem-dups s)
  match s
    | (list)             (list)
    | (list-rest a a p)  rem-dups (cons a p)
    | (list-rest a p)    cons a (rem-dups p)

map _rem-dups
  list
    list
    list 1
    list 1 1
    list 1 2 1
    list 1 1 1 2
    list 1 1 2 2 3 1

/def qsort1 1
define (qsort1 s)
  cond
    | (or empty? s empty? rest s)  s
    | else                         let*-values : | (p)            first s
                                                 | (split)        lambda (x) < x p
                                                 | (lower upper)  partition split (rest s)
                                     append (qsort1 lower) (list p) (qsort1 upper)

qsort1 list 3 14 15 92 6 53 58 97 93 23

/def vector-swap 3
define (vector-swap vec i j)
  let : | t  vector-ref vec i
    vector-set! vec i (vector-ref vec j)
    vector-set! vec j t

/def part 4
define (part vec left right p)
  define pivot (vector-ref vec p)
  vector-swap vec p right
  define border left
  for : | i     range left right
        #:when  <= (vector-ref vec i) pivot
    vector-swap vec i border
    set! border (add1 border)
  vector-swap vec border right
  border

/def qsort2 1
define (qsort2 vec)
  define (sort left right)
    when (< left right)
      let* : | p   + left (random - right left)
             | p*  part vec left right p
        sort left (sub1 p*)
        sort (add1 p*) right
  (sort 0 (sub1 vector-length vec))

let : | blah  vector 3 14 15 92 6 53 58 97 93 23
  qsort2 blah
  blah

