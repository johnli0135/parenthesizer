/use racket.txt
define (f x y)
    display x;
    display y;
    + x y.

define (f x y)
    // new indentation level does nothing
    +
        x
      // does nothinng
      y
// new indentation level closes def and +  

define.

let [(a 3)
     (b 4)
     (c 5)]
    +: a b c

+ + + + + + + 1 2 3 4 5 6 7 8

define (f x y)
    display x
    display y
    + x y

define (f x y)
/off
    (display x)
    (display y)
    (+ x y)
    /on

define x 3.

define (fact n)
    if = n 1
        1
        * n (fact - n 1)

/def fact 1
define fact n
    if = n 1
        1
        * n fact - n 1

fact 3

/mask fact

fact 4

/unmask fact

fact 3

define (file->string file)
   foldl
       lambda (x y) (string-append x "\n" y)
       ""
       file->lines file

define (swap stack)
    let ([tail rest rest stack]
         [top first stack]
         [mid first rest stack])
        cons mid (cons top tail)

